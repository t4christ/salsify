name: Deployment to ECS
on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: write
  pull-requests: write
  issues: write
  repository-projects: write

jobs:
  build-and-deploy-to-ecr:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-session-name: GitHub_to_AWS_via_FederatedOIDC
        role-to-assume: ${{ secrets.AWS_ASSUME_ROLE }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Get build ID
      id: getbuildid
      run: echo "build_id=$(echo $GITHUB_SHA | cut -c1-8)" >> $GITHUB_OUTPUT
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build Docker Image
      run: |
          docker build -t  ${{ vars.ECR_REGISTRY }}/salsify-ecr-repo:${{ steps.getbuildid.outputs.build_id }} .
          docker build -t  ${{ vars.ECR_REGISTRY }}/salsify-ecr-repo:latest .

    - name: Run Trivy vulnerability scanner in repo mode
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ vars.ECR_REGISTRY }}/salsify-ecr-repo:${{ steps.getbuildid.outputs.build_id }}'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL'
        scanners: 'vuln,secret,config'

    - name: Push Docker Image
      run: |
          docker push ${{ vars.ECR_REGISTRY }}/salsify-ecr-repo:${{ steps.getbuildid.outputs.build_id }}
          docker push ${{ vars.ECR_REGISTRY }}/salsify-ecr-repo:latest

    - name: New Image For ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ secrets.ECS_TASK_DEFINITION }}
        container-name: ${{ secrets.ECS_CONTAINER_NAME }}
        image: ${{ vars.ECR_REGISTRY }}/salsify-ecr-repo:${{ steps.getbuildid.outputs.build_id }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ secrets.ECS_SERVICE }}
        cluster: ${{ secrets.ECS_CLUSTER }}
        wait-for-service-stability: true